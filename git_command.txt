
Отправляем изменения из локального репозитория в удалённый. Для этого используем команды:
 
git push origin master

Для переноса изменений в локальный репозиторий из оригинального (удалённого) используем команду:
 
git fetch & git pull

Давайте теперь посмотрим, какие файлы у нас зарегистрированы в репозитории.
 
Используем команду 
 
git ls-files

Эту же информацию можно получить через другую команду
 
git log -1 -p origin/master

Давайте попросим git вернуть наш файл
 
для этого используем команду
 
git checkout dist/Echo.java

И теперь удалим его через команду
 
git rm dist/Echo.java


mvn clean install


Пример XML - pom.xml

 <project>
    <modelVersion>4.0.0</modelVersion>
    <groupId>ru.job4j</groupId>
    <artifactId>junior</artifactId>
    <packaging>pom</packaging>
    <version>2.0</version>
     <name>junior</name>
     <url>http://job4j.ru/</url>

    <properties>
       <maven.compiler.source>1.8</maven.compiler.source>
       <maven.compiler.target>1.8</maven.compiler.target>
       <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     </properties>

    <modules>
       <module>chapter_001</module>
     </modules>
	 
	 <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.0.0</version>
            </plugin>
        </plugins>
    </build>
	
	<dependencies>
		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-all</artifactId>
			<version>1.3</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
	 </dependencies>
</project>


//собрать javadoc
mvn javadoc:javadoc

//собрать запустить тест
mvn clean test

//проверка checkstyle
mvn validate